// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  AGENCY_OWNER
  AGENCY_ADMIN
  SUBACCOUNT_USER
  SUBACCOUNT_GUEST
}

enum Icon {
  settings
  chart
  calendar
  check
  chip
  compass
  database
  flag
  home
  info
  link
  lock
  messages
  notification
  payment
  power
  receipt
  shield
  star
  tune
  videorecorder
  wallet
  warning
  headphone
  send
  pipelines
  person
  category
  contact
  clipboardIcon
}

model User {
  id        String   @id @default(uuid())
  name      String
  avatarUrl String   @db.Text
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //
  role Role @default(SUBACCOUNT_USER)

  // Each user can be assigned to only one agency
  agencyId String?
  Agency   Agency? @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  // Can a user see a subaccount?
  // NOT the role! That is what the enum is for
  Permissions Permissions[]

  // Canban board
  Ticket Ticket[]

  // If somebody made a change, the change is assigned to the user
  Notification Notification[]

  @@index([agencyId])
}

////////////////////
// Permissions determines the different accounts the user will see
// One user may have many permissions, or subaccount accesses
// 
// //////////////////
model Permissions {
  id    String @id @default(uuid())
  // Why email?
  // This is what User references rather than the userId unfortunately
  // 
  email String

  // This assigns the email tag
  User User @relation(fields: [email], references: [email], onDelete: Cascade)

  // SubAccount is what the user is allowed to access
  subAccountId String
  SubAccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)

  // Determines if the user has access
  access Boolean

  // THIS IS WRONG --> Must have a unique subAccount AND email
  // index refers to a normal non-unique index
  // may contain rows of identical values
  // Does not enforce constraints upon access
  // Used for quickly accessing records without scanning all records
  @@index([subAccountId])
  @@index([email])
}

////////////////////
// AGENCY
// 
model Agency {
  id String @id @default(uuid())

  // Used for Stripe
  // Every user may connect their Stripe account for payments
  connectAccountId String? @default("")
  //customerId       String                @default("")

  // Company info
  name         String
  agencyLogo   String  @db.Text
  companyEmail String  @db.Text
  companyPhone String
  whiteLabel   Boolean @default(true)

  // Address info
  address String
  city    String
  zipCode String
  state   String
  country String

  // 
  goal Int @default(5)

  // Users apart of the agency
  // Multiple users can be apart of an agency
  // SubAccounts belong to the agency - user just gets access
  users         User[]
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  SubAccount    SubAccount[]
  // Agency sidebar options - control what sidebar looks like
  SidebarOption AgencySidebarOption[]
  //Invited into an agency
  Invitation    Invitation[]

  // Connects to the user to see their history and changes
  Notification Notification[]

  // Stripe stuff
  Subscription Subscription?

  // Different products in addition to subscription model
  AddOns AddOns[]
}

///////////////////////////
// Sub Account - Owned by an agency, and controlled by a user
// Allows a user to modify stuff, but the things modified are owned by the 
// agency. 
//////////////////////////
model SubAccount {
  id               String   @id @default(uuid())
  connectAccountId String?  @default("")
  name             String
  subAccountLogo   String   @db.Text
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  companyEmail     String   @db.Text
  companyPhone     String
  goal             Int      @default(5)
  address          String
  city             String
  zipCode          String
  state            String
  country          String
  agencyId         String
  //Agency the subaccount belongs to
  Agency           Agency   @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  // Allows modifying the sidebar
  SidebarOption SubAccountSidebarOption[]

  // Connects to a user, multiple users can control a subaccount
  Permissions Permissions[]

  // Each subaccount will have multiple websites
  Funnels Funnel[]

  // ALL media files stored
  Media Media[]

  // All leads for the subaccount
  Contact Contact[]

  // Trigger, automation, pipeline is a bonus
  Trigger    Trigger[]
  Automation Automation[]
  Pipeline   Pipeline[]

  // Assign tags to tickets, 
  Tags Tag[]

  // 
  Notification Notification[]

  @@index([agencyId])
}

//////////////////
// Tags - each ticket can be assigned a tag
//////////////////
model Tag {
  id           String   @id @default(uuid())
  name         String
  color        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  subAccountId String

  SubAccount SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  Ticket     Ticket[]

  @@index([subAccountId])
}

///////////////////////
// The entire cancan board
// Each pipeline has lanes
// Each lane has tickets
// Each ticket has tags
///////////////////////
model Pipeline {
  id           String     @id @default(uuid())
  name         String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Lane         Lane[]
  SubAccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  subAccountId String

  @@index([subAccountId])
}

model Lane {
  id         String   @id @default(uuid())
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Pipeline   Pipeline @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  pipelineId String
  Tickets    Ticket[]
  order      Int      @default(0)

  @@index([pipelineId])
}

model Ticket {
  id          String   @id @default(uuid())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  laneId      String
  order       Int      @default(0)
  Lane        Lane     @relation(fields: [laneId], references: [id], onDelete: Cascade)
  value       Decimal?
  description String?
  Tags        Tag[]

  customerId String?
  Customer   Contact? @relation(fields: [customerId], references: [id], onDelete: SetNull)

  assignedUserId String?
  Assigned       User?   @relation(fields: [assignedUserId], references: [id], onDelete: SetNull)

  @@index([laneId])
  @@index([customerId])
  @@index([assignedUserId])
}

enum TriggerTypes {
  CONTACT_FORM
}

model Trigger {
  id           String       @id @default(uuid())
  name         String
  type         TriggerTypes
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  subAccountId String
  Subaccount   SubAccount   @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  Automations  Automation[]

  @@index([subAccountId])
}

model Automation {
  id                 String               @id @default(uuid())
  name               String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  triggerId          String?
  published          Boolean              @default(false)
  Trigger            Trigger?             @relation(fields: [triggerId], references: [id], onDelete: Cascade)
  subAccountId       String
  Subaccount         SubAccount           @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  Action             Action[]
  AutomationInstance AutomationInstance[]

  @@index([triggerId])
  @@index([subAccountId])
}

model AutomationInstance {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  automationId String
  Automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
  active       Boolean    @default(false)

  @@index([automationId])
}

enum ActionType {
  CREATE_CONTACT
}

model Action {
  id           String     @id @default(uuid())
  name         String
  type         ActionType
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  automationId String
  order        Int
  Automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
  laneId       String     @default("0")

  @@index([automationId])
}

/////////////////
//Leads for the sub account through the website
//
/////////////////
model Contact {
  id           String   @id @default(uuid())
  name         String
  email        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  subAccountId String

  Subaccount SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  Ticket     Ticket[]

  @@index([subAccountId])
}

///////////////////
// Media - Each media file has these fields
///////////////////
model Media {
  id           String     @id @default(uuid())
  type         String?
  name         String
  link         String     @unique
  subAccountId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Subaccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)

  @@index([subAccountId])
}

/////////////////////////
// Also a website
/////////////////////////
model Funnel {
  id            String       @id @default(uuid())
  name          String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  description   String?
  published     Boolean      @default(false)
  subDomainName String?      @unique
  favicon       String?      @db.Text
  subAccountId  String
  SubAccount    SubAccount   @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  FunnelPages   FunnelPage[]
  liveProducts  String?      @default("[]")
  ClassName     ClassName[]

  @@index([subAccountId])
}

model ClassName {
  id         String   @id @default(uuid())
  name       String
  color      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  funnelId   String
  customData String?  @db.Text
  Funnel     Funnel   @relation(fields: [funnelId], references: [id], onDelete: Cascade)

  @@index([funnelId])
}

//////////////////////
// Each funnel has a funnel page
/////////////////////
model FunnelPage {
  id           String   @id @default(uuid())
  name         String
  pathName     String   @default("")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  visits       Int      @default(0)
  content      String?  @db.Text
  order        Int
  previewImage String?  @db.Text
  funnelId     String
  Funnel       Funnel   @relation(fields: [funnelId], references: [id], onDelete: Cascade)

  @@index([funnelId])
}

//////////////////////
// Allows hiding subaccount options or permissions
//////////////////////
model AgencySidebarOption {
  id        String   @id @default(uuid())
  name      String   @default("Menu")
  link      String   @default("#")
  icon      Icon     @default(info)
  agencyId  String
  Agency    Agency?  @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([agencyId])
}

/////////////////////////
// Subaccount bar
/////////////////////////
model SubAccountSidebarOption {
  id           String      @id @default(uuid())
  name         String      @default("Menu")
  link         String      @default("#")
  icon         Icon        @default(info)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  SubAccount   SubAccount? @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  subAccountId String?

  @@index([subAccountId])
}

//////////////////////////
// Can send invitations for each user
//////////////////////////
enum InvitationStatus {
  ACCEPTED
  REVOKED
  PENDING
}

model Invitation {
  id       String           @id @default(uuid())
  email    String           @unique
  agencyId String
  Agency   Agency           @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  status   InvitationStatus @default(PENDING)
  role     Role             @default(SUBACCOUNT_USER)

  @@index([agencyId])
}

model Notification {
  id           String  @id @default(uuid())
  notification String
  agencyId     String
  subAccountId String?
  userId       String

  User       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  Agency     Agency      @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  SubAccount SubAccount? @relation(fields: [subAccountId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([agencyId])
  @@index([subAccountId])
  @@index([userId])
}

/////////////////////////
// Stripe pricing plans
/////////////////////////
enum Plan {
  price_1OYxkqFj9oKEERu1NbKUxXxN
  price_1OYxkqFj9oKEERu1KfJGWxgN
}

/////////////////////////
// Stripe subscription
/////////////////////////
model Subscription {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  plan      Plan?
  price     String?
  active    Boolean  @default(false)

  priceId              String
  customerId           String
  currentPeriodEndDate DateTime
  subscritiptionId     String   @unique

  agencyId String? @unique
  Agency   Agency? @relation(fields: [agencyId], references: [id])

  @@index([customerId])
}

/////////////////////////
// Another challenge
////////////////////////
model AddOns {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  active    Boolean  @default(false)
  priceId   String   @unique
  agencyId  String?
  Agency    Agency?  @relation(fields: [agencyId], references: [id])

  @@index([agencyId])
}
